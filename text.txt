"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  AlertCircle,
  Plus,
  ArrowLeft,
  Trash,
  Upload,
  Info,
  Loader2,
} from "lucide-react";
import { format } from "date-fns";
import ImageCropper from "../shared/imagecrop/Imagecrop";
import { useCurrentUser } from "@/hooks/auth";
import Image from "next/image";
import { FloatingLabelInput, FloatingLabelSelect, FloatingLabelTextarea } from "../FloatingInput";
import dynamic from "next/dynamic";
import "react-quill/dist/quill.snow.css";

// Dynamically import ReactQuill to avoid SSR issues
const ReactQuill = dynamic(() => import("react-quill"), { ssr: false });

// Type definitions
interface Field {
  id: string;
  type: string;
  label: string;
  required: boolean;
  sequence: number;
  options?: string[];
}

interface Schema {
  fields: Field[];
}

interface Metadata {
  id: string;
  dealTypeId: string;
  schema: Schema;
  isActive: boolean;
  createdBy: string;
  createdAt: string;
  updatedAt: string;
}

interface DealType {
  id: string;
  name: string;
  description: string;
  isActive: boolean;
  createdBy: string;
  createdAt: string;
  updatedAt: string;
}

// Base deal information
interface DealFormData {
  title: string;
  travelType: string;
  travelAgentId: string;
  description: string;
  price: string;
  discount: string;
  country: string;
  state: string;
  city: string;
  validFrom: string;
  validTo: string;
  contactPhones: string[];
  contactEmails: string[];
  dealTypeDefinitionId: string;
  metadata: Record<string, any>;
  images: string;
  isActive: boolean;
  isPromoted: boolean;
}

interface CreateDealPageProps {
  onBack: (dealCreated?: boolean) => void;
}

export default function CreateDealPage({ onBack }: CreateDealPageProps) {
  const router = useRouter();
  const [dealTypes, setDealTypes] = useState<DealType[]>([]);
  const [metadata, setMetadata] = useState<Metadata[]>([]);
  const [selectedDealType, setSelectedDealType] = useState<string>("");
  const [selectedTemplate, setSelectedTemplate] = useState<Metadata | null>(
    null
  );
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [submitting, setSubmitting] = useState<boolean>(false);
  const [uploadingImage, setUploadingImage] = useState<boolean>(false);
  const [pendingSubmit, setPendingSubmit] = useState<boolean>(false);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const user = useCurrentUser();

  // Initialize form data with default values
  const [dealFormData, setDealFormData] = useState<DealFormData>({
    title: "",
    travelType: "DOMESTIC",
    travelAgentId: user?.id || "",
    description: "",
    price: "",
    discount: "",
    country: "",
    state: "",
    city: "",
    validFrom: format(new Date(), "yyyy-MM-dd"),
    validTo: format(
      new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
      "yyyy-MM-dd"
    ),
    contactPhones: [""],
    contactEmails: [""],
    dealTypeDefinitionId: "",
    metadata: {},
    images: "",
    isActive: true,
    isPromoted: false,
  });

  // Check if image upload is complete and submit pending form
  useEffect(() => {
    const submitPendingForm = async () => {
      if (pendingSubmit && !uploadingImage && dealFormData.images) {
        // Now submit the form with the image URL included
        await submitDealForm();
        setPendingSubmit(false);
      }
    };

    submitPendingForm();
  }, [pendingSubmit, uploadingImage, dealFormData.images]);

  // Fetch deal types and metadata
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);

        // Fetch deal types
        const dealTypesResponse = await fetch("/api/deal-types");
        if (!dealTypesResponse.ok) {
          throw new Error("Failed to fetch deal types");
        }
        const dealTypesData = await dealTypesResponse.json();

        // Fetch all metadata
        const metadataResponse = await fetch("/api/deal-type-metadata");
        if (!metadataResponse.ok) {
          throw new Error("Failed to fetch metadata");
        }
        const metadataData = await metadataResponse.json();

        setDealTypes(dealTypesData.dealTypes);
        setMetadata(metadataData.metadata);
      } catch (err) {
        setError(
          err instanceof Error ? err.message : "An unknown error occurred"
        );
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [user]);

  // Get metadata for a specific deal type
  const getMetadataForDealType = (dealTypeId: string) => {
    return metadata.filter((item) => item.dealTypeId === dealTypeId);
  };

  // Handle deal type selection
  const handleDealTypeChange = (value: string) => {
    setSelectedDealType(value);
    setDealFormData((prev) => ({
      ...prev,
      dealTypeDefinitionId: value,
    }));

    const templates = getMetadataForDealType(value);
    if (templates.length > 0) {
      setSelectedTemplate(templates[0]);
      // Initialize metadata with empty values
      const initialMetadata: Record<string, any> = {};
      templates[0].schema.fields.forEach((field) => {
        if (field.type === "array") {
          initialMetadata[field.id] = [""];
        } else if (field.type === "object") {
          initialMetadata[field.id] = {};
        } else {
          initialMetadata[field.id] = "";
        }
      });
      setDealFormData((prev) => ({
        ...prev,
        metadata: initialMetadata,
      }));
    } else {
      setSelectedTemplate(null);
      setDealFormData((prev) => ({
        ...prev,
        metadata: {},
      }));
    }
  };

  // Handle basic form input changes
  const handleBasicInputChange = (field: keyof DealFormData, value: any) => {
    setDealFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
    
    // Clear validation error when field is edited
    if (validationErrors[field]) {
      setValidationErrors((prev) => {
        const updated = { ...prev };
        delete updated[field];
        return updated;
      });
    }
  };

  // Handle array fields for basic info
  const handleBasicArrayItemChange = (
    field: "contactPhones" | "contactEmails",
    index: number,
    value: string
  ) => {
    setDealFormData((prev) => {
      const newArray = [...prev[field]];
      newArray[index] = value;
      return {
        ...prev,
        [field]: newArray,
      };
    });
    
    // Clear validation error when field is edited
    if (validationErrors[field]) {
      setValidationErrors((prev) => {
        const updated = { ...prev };
        delete updated[field];
        return updated;
      });
    }
  };

  const handleAddBasicArrayItem = (
    field: "contactPhones" | "contactEmails"
  ) => {
    setDealFormData((prev) => {
      const newArray = [...prev[field], ""];
      return {
        ...prev,
        [field]: newArray,
      };
    });
  };

  const handleRemoveBasicArrayItem = (
    field: "contactPhones" | "contactEmails",
    index: number
  ) => {
    setDealFormData((prev) => {
      const newArray = [...prev[field]];
      newArray.splice(index, 1);
      return {
        ...prev,
        [field]: newArray,
      };
    });
  };

  // Handle metadata input changes
  const handleMetadataChange = (fieldId: string, value: any) => {
    setDealFormData((prev) => ({
      ...prev,
      metadata: {
        ...prev.metadata,
        [fieldId]: value,
      },
    }));
    
    // Clear validation error when field is edited
    if (validationErrors[`metadata.${fieldId}`]) {
      setValidationErrors((prev) => {
        const updated = { ...prev };
        delete updated[`metadata.${fieldId}`];
        return updated;
      });
    }
  };

  // Handle array field changes for metadata
  const handleMetadataArrayItemChange = (
    fieldId: string,
    index: number,
    value: string
  ) => {
    setDealFormData((prev) => {
      const currentArray = prev.metadata[fieldId] || [];
      const newArray = [...currentArray];
      newArray[index] = value;
      return {
        ...prev,
        metadata: {
          ...prev.metadata,
          [fieldId]: newArray,
        },
      };
    });
    
    // Clear validation error when field is edited
    if (validationErrors[`metadata.${fieldId}`]) {
      setValidationErrors((prev) => {
        const updated = { ...prev };
        delete updated[`metadata.${fieldId}`];
        return updated;
      });
    }
  };

  // Add item to array field in metadata
  const handleAddMetadataArrayItem = (fieldId: string) => {
    setDealFormData((prev) => {
      const currentArray = prev.metadata[fieldId] || [];
      const newArray = [...currentArray, ""];
      return {
        ...prev,
        metadata: {
          ...prev.metadata,
          [fieldId]: newArray,
        },
      };
    });
  };

  // Remove item from array field in metadata
  const handleRemoveMetadataArrayItem = (fieldId: string, index: number) => {
    setDealFormData((prev) => {
      const currentArray = prev.metadata[fieldId] || [];
      const newArray = [...currentArray];
      newArray.splice(index, 1);
      return {
        ...prev,
        metadata: {
          ...prev.metadata,
          [fieldId]: newArray,
        },
      };
    });
  };

  // Handle image upload
  const handleImageUpload = async (croppedImage: string, type: "cover") => {
    try {
      setUploadingImage(true);
      setError(null);

      // First convert the data URL to a blob
      const response = await fetch(croppedImage);
      const blob = await response.blob();

      // Create form data for the upload
      const formData = new FormData();
      formData.append("image", blob, `${type}-image.jpg`);

      // Send the image to the server
      const uploadResponse = await fetch("/api/media/upload", {
        method: "POST",
        body: formData,
      });

      if (!uploadResponse.ok) {
        throw new Error("Image upload failed: " + uploadResponse.statusText);
      }

      // Parse the response to get the image URL
      const result = await uploadResponse.json();

      // Add the uploaded image URL to the dealFormData.images
      if (result && result.url) {
        setDealFormData((prevData) => ({
          ...prevData,
          images: result.url,
        }));
        
        // Clear image validation error
        if (validationErrors.images) {
          setValidationErrors((prev) => {
            const updated = { ...prev };
            delete updated.images;
            return updated;
          });
        }
      } else {
        throw new Error("No URL returned from upload");
      }
    } catch (error) {
      console.error("Error uploading image:", error);
      setError(
        `Image upload failed: ${
          error instanceof Error ? error.message : "Unknown error"
        }`
      );
    } finally {
      setUploadingImage(false);
    }
  };

  // Remove image
  const handleRemoveImage = () => {
    setDealFormData((prev) => ({
      ...prev,
      images: "", // Clear the image by setting it to an empty string
    }));
  };

  // Validate form before submission
  const validateForm = () => {
    const errors: Record<string, string> = {};

    // Check for valid to date
    if (!dealFormData.validTo) errors.validTo = "Valid to date is required";
    
    // Check for contact information
    if (!dealFormData.contactPhones.some(phone => phone.trim() !== "")) 
      errors.contactPhones = "At least one contact phone is required";
      
    if (!dealFormData.contactEmails.some(email => email.trim() !== "")) 
      errors.contactEmails = "At least one contact email is required";
    
    // Check if image is required
    if (!dealFormData.images) errors.images = "Cover image is required";
    
    // Check metadata fields
    if (selectedTemplate) {
      selectedTemplate.schema.fields.forEach(field => {
        if (field.required) {
          const value = dealFormData.metadata[field.id];
          if (field.type === "array") {
            if (!Array.isArray(value) || !value.some(item => item.trim() !== "")) {
              errors[`metadata.${field.id}`] = `${field.label} is required`;
            }
          } else if (field.type === "object") {
            if (!value || Object.keys(value).length === 0) {
              errors[`metadata.${field.id}`] = `${field.label} is required`;
            }
          } else if (!value && value !== 0) {
            errors[`metadata.${field.id}`] = `${field.label} is required`;
          }
        }
      });
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // Submit the deal form data to the API
  const submitDealForm = async () => {
    try {
      // Validate form before submission
      if (!validateForm()) {
        return false;
      }

      setSubmitting(true);

      // Convert price and discount to numbers for API
      const formattedData = {
        ...dealFormData,
        price: dealFormData.price ? parseFloat(dealFormData.price) : undefined,
        discount: dealFormData.discount
          ? parseFloat(dealFormData.discount)
          : undefined,
        // Filter out empty array items
        contactPhones: dealFormData.contactPhones.filter(
          (phone) => phone.trim() !== ""
        ),
        contactEmails: dealFormData.contactEmails.filter(
          (email) => email.trim() !== ""
        ),
      };

      console.log("Submitting deal data:", formattedData);

      const response = await fetch("/api/deals", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formattedData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to create deal");
      }

      // Navigate back to deals list on success
      onBack(true);
      return true;
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "An unknown error occurred"
      );
      return false;
    } finally {
      setSubmitting(false);
    }
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate form first
    if (!validateForm()) {
      return;
    }
    
    // If there's an image and it's already uploaded, proceed with form submission
    if (dealFormData.images) {
      await submitDealForm();
    } 
    // If there's an image being uploaded, set pendingSubmit flag
    else if (uploadingImage) {
      setPendingSubmit(true);
    }
    // If no image provided or needed, submit directly
    else {
      await submitDealForm();
    }
  };

  // Render metadata field based on field type
  const renderMetadataField = (field: Field) => {
    const errorKey = `metadata.${field.id}`;
    const hasError = !!validationErrors[errorKey];
    
    const renderFieldError = () => {
      return hasError && (
        <div className="text-red-500 text-xs mt-1">
          {validationErrors[errorKey]}
        </div>
      );
    };
    
    switch (field.type) {
      case "text":
        return (
          <div className="space-y-1" key={field.id}>
            <FloatingLabelInput
              id={field.id}
              label={field.label}
              value={dealFormData.metadata[field.id] || ""}
              onChange={(e) => handleMetadataChange(field.id, e.target.value)}
              placeholder={`Enter ${field.label.toLowerCase()}`}
              required={field.required}
              className={hasError ? "border-red-500" : ""}
            />
            {renderFieldError()}
          </div>
        );
  
      case "textarea":
        return (
          <div className="space-y-1" key={field.id}>
            <FloatingLabelTextarea
              id={field.id}
              label={field.label}
              value={dealFormData.metadata[field.id] || ""}
              onChange={(e) => handleMetadataChange(field.id, e.target.value)}
              placeholder={`Enter ${field.label.toLowerCase()}`}
              required={field.required}
              className={hasError ? "border-red-500" : ""}
            />
            {renderFieldError()}
          </div>
        );
  
      case "number":
        return (
          <div className="space-y-1" key={field.id}>
            <FloatingLabelInput
              id={field.id}
              type="number"
              label={field.label}
              value={dealFormData.metadata[field.id] || ""}
              onChange={(e) =>
                handleMetadataChange(field.id, parseFloat(e.target.value) || "")
              }
              placeholder={`Enter ${field.label.toLowerCase()}`}
              required={field.required}
              className={hasError ? "border-red-500" : ""}
            />
            {renderFieldError()}
          </div>
        );
  
      case "date":
        return (
          <div className="space-y-1" key={field.id}>
            <FloatingLabelInput
              id={field.id}
              type="date"
              label={field.label}
              value={dealFormData.metadata[field.id] || ""}
              onChange={(e) => handleMetadataChange(field.id, e.target.value)}
              required={field.required}
              className={hasError ? "border-red-500" : ""}
            />
            {renderFieldError()}
          </div>
        );
  
      case "select":
        return (
          <div className="space-y-1" key={field.id}>
            {(field.options ?? []).length <= 3 ? (
              <div>
                <Label htmlFor={field.id}>
                  {field.label}
                  {field.required && <span className="text-red-500">*</span>}
                </Label>
                <div className="flex gap-4 mt-1">
                  {(field.options ?? []).map((option) => (
                    <label key={option} className="flex items-center space-x-2">
                      <input
                        type="radio"
                        name={field.id}
                        value={option}
                        checked={dealFormData.metadata[field.id] === option}
                        onChange={() => handleMetadataChange(field.id, option)}
                        required={field.required}
                        className="accent-blue-500"
                      />
                      <span>{option}</span>
                    </label>
                  ))}
                </div>
                {renderFieldError()}
              </div>
            ) : (
              <div>
                <FloatingLabelSelect
                  id={field.id}
                  label={field.label}
                  value={dealFormData.metadata[field.id] || ""}
                  onValueChange={(value) => handleMetadataChange(field.id, value)}
                  required={field.required}
                  className={hasError ? "border-red-500" : ""}
                >
                  <option value="">Select {field.label}</option>
                  {field.options?.map((option) => (
                    <option key={option} value={option}>
                      {option}
                    </option>
                  ))}
                </FloatingLabelSelect>
                {renderFieldError()}
              </div>
            )}
          </div>
        );
  
      case "array":
        return (
          <div className="space-y-1" key={field.id}>
            <Label>
              {field.label}
              {field.required && <span className="text-red-500">*</span>}
            </Label>
            <div className="space-y-2">
              {(Array.isArray(dealFormData.metadata[field.id])
                ? dealFormData.metadata[field.id]
                : [""]
              ).map((item: string, index: number) => (
                <div key={index} className="flex gap-2">
                  <FloatingLabelInput
                    id={`${field.id}-${index}`}
                    label={`${field.label} Item ${index + 1}`}
                    value={item}
                    onChange={(e) =>
                      handleMetadataArrayItemChange(
                        field.id,
                        index,
                        e.target.value
                      )
                    }
                    placeholder={`Enter ${field.label.toLowerCase()} item`}
                    required={field.required && index === 0}
                    className={hasError ? "border-red-500" : ""}
                  />
                  <Button
                    type="button"
                    variant="outline"
                    size="icon"
                    onClick={() =>
                      handleRemoveMetadataArrayItem(field.id, index)
                    }
                    disabled={
                      (dealFormData.metadata[field.id] || []).length <= 1
                    }
                  >
                    <Trash className="h-4 w-4" />
                  </Button>
                </div>
              ))}
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => handleAddMetadataArrayItem(field.id)}
                className="flex items-center"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add {field.label} Item
              </Button>
              {renderFieldError()}
            </div>
          </div>
        );
  
      case "object":
        return (
          <div className="space-y-1" key={field.id}>
            <Label>
              {field.label}
              {field.required && <span className="text-red-500">*</span>}
            </Label>
            <div className={`border p-4 rounded-md bg-gray-50 ${hasError ? "border-red-500" : ""}`}>
              <textarea
                className="w-full min-h-24 p-2 rounded-md font-mono text-sm"
                value={JSON.stringify(
                  dealFormData.metadata[field.id] || {},
                  null,
                  2
                )}
                onChange={(e) => {
                  try {
                    const parsed = JSON.parse(e.target.value);
                    handleMetadataChange(field.id, parsed);
                  } catch (err) {
                    // Allow invalid JSON while typing
                    handleMetadataChange(field.id, e.target.value);
                  }
                }}
                placeholder={`Enter ${field.label.toLowerCase()} as JSON`}
                required={field.required}
              />
              <p className="text-xs text-gray-500 mt-1">
                Enter valid JSON for this field
              </p>
            </div>
            {renderFieldError()}
          </div>
        );
  
      default:
        return (
          <div key={field.id} className="text-gray-500">
            Unsupported field type: {field.type}
          </div>
        );
    }
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        Loading form...
      </div>
    );
  }
  
  return (
    <div className="container mx-auto px-4">
      <Button
        variant="ghost"
        className="mb-4 flex items-center"
        onClick={() => onBack(false)}
      >
        <ArrowLeft className="h-4 w-4 mr-2" />
        Back to Deals
      </Button>
  
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 p-3 rounded-md mb-4 flex items-start">
          <AlertCircle className="h-5 w-5 mr-2 mt-0.5 flex-shrink-0" />
          <span>{error}</span>
        </div>
      )}
  
      <form onSubmit={handleSubmit} className="space-y-4">
        {/* Combined Deal Selection and Details Card */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between p-4 space-y-0">
            <div>
              <CardTitle className="text-lg">Deal Details</CardTitle>
              {selectedTemplate && (
                <CardDescription className="text-sm">
                  {dealTypes.find((dt) => dt.id === selectedDealType)?.name}
                </CardDescription>
              )}
            </div>
  
            <div>
              <FloatingLabelSelect
                id="dealType"
                label="Deal Type"
                value={selectedDealType}
                onValueChange={handleDealTypeChange}
                required
                className="w-[200px]"
              >
                <option value="">Select Deal Type</option>
                {dealTypes.map((dealType) => (
                  <option key={dealType.id} value={dealType.id}>
                    {dealType.name}
                  </option>
                ))}
              </FloatingLabelSelect>
              {validationErrors.dealTypeDefinitionId && (
                <div className="text-red-500 text-xs mt-1">
                  {validationErrors.dealTypeDefinitionId}
                </div>
              )}
            </div>
          </CardHeader>
  
          <CardContent className="p-4">
            {selectedDealType ? (
              selectedTemplate ? (
                <div className="space-y-3">
                  {/* Two-column layout for metadata fields */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {/* First column */}
                    <div className="space-y-3">
                      {selectedTemplate.schema.fields
                        .filter((_, index) => index % 2 === 0)
                        .sort((a, b) => a.sequence - b.sequence)
                        .map((field) => renderMetadataField(field))}
                    </div>
  
                    {/* Second column */}
                    <div className="space-y-3">
                      {selectedTemplate.schema.fields
                        .filter((_, index) => index % 2 !== 0)
                        .sort((a, b) => a.sequence - b.sequence)
                        .map((field) => renderMetadataField(field))}
                    </div>

                    <div>
                      <FloatingLabelInput
                        id="validTo"
                        type="date"
                        label="Valid To"
                        value={dealFormData.validTo}
                        onChange={(e) => handleBasicInputChange("validTo", e.target.value)}
                        required
                        className={validationErrors.validTo ? "border-red-500" : ""}
                      />
                      {validationErrors.validTo && (
                        <div className="text-red-500 text-xs mt-1">
                          {validationErrors.validTo}
                        </div>
                      )}
                    </div>
                  </div>
  
                  {/* Description section with reduced spacing */}
                  <div className="space-y-2 mt-3">
                    <Label className="text-sm">Description (Optional)</Label>
                    <div className="min-h-[180px]">
                      {typeof window !== 'undefined' && (
                        <ReactQuill
                          theme="snow"
                          value={dealFormData.description}
                          onChange={(content) =>
                            handleBasicInputChange("description", content)
                          }
                          placeholder="Enter detailed description..."
                        />
                      )}
                    </div>
                  </div>
  
                  {/* Contact information section with more compact layout */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-3">
                    <div>
                      <Label className="text-sm">Contact Phones<span className="text-red-500">*</span></Label>
                      <div className="space-y-2 mt-1">
                        {dealFormData.contactPhones.map((phone, index) => (
                          <div key={index} className="flex gap-2">
                            <FloatingLabelInput
                              id={`phone-${index}`}
                              label={`Phone ${index + 1}`}
                              value={phone}
                              onChange={(e) =>
                                handleBasicArrayItemChange(
                                  "contactPhones",
                                  index,
                                  e.target.value
                                )
                              }
                              placeholder="Phone number"
                              required={index === 0}
                              className={validationErrors.contactPhones ? "border-red-500" : ""}
                            />
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() =>
                                handleRemoveBasicArrayItem(
                                  "contactPhones",
                                  index
                                )
                              }
                              disabled={
                                dealFormData.contactPhones.length <= 1


