
interface ImageCarouselProps {
  images: string[] | null;
}
// const ImageCarousel: React.FC<ImageCarouselProps> = ({ images }) => {
//   const [currentSlide, setCurrentSlide] = useState<number>(0);
//   const [imageArray, setImageArray] = useState<string[]>([]);
//   const [redirectUrls, setRedirectUrls] = useState<string[]>([]);
//   const router = useRouter();
  
//   // Parse image URLs and redirect URLs - ALWAYS execute this hook
//   useEffect(() => {
//     if (images && images.length > 0) {
//       const imgArr: string[] = [];
//       const redArr: string[] = [];
      
//       images.forEach((item) => {
//         const parts = item.split(" ");
//         if (parts[0] && parts[0].trim() !== "") {
//           imgArr.push(parts[0]);
//           redArr.push(parts[1] || "");
//         }
//       });
      
//       setImageArray(imgArr);
//       setRedirectUrls(redArr);
//     }
//   }, [images]);
  
//   // Handle slide rotation - ALWAYS execute this hook
//   useEffect(() => {
//     // Only set up interval if we have multiple images
//     if (imageArray.length <= 1) return;
    
//     const intervalId = setInterval(() => {
//       setCurrentSlide((prevSlide) => (prevSlide + 1) % imageArray.length);
//     }, 3000);
    
//     // Clean up on unmount
//     return () => {
//       clearInterval(intervalId);
//     };
//   }, [imageArray.length]);
  
//   const handleDealClick = (index: number) => {
//     if (index >= 0 && redirectUrls[index]) {
//       console.log("Redirecting to:", redirectUrls[index], " ",index);
//       router.push(`/details/${redirectUrls[index]}`);
//     }
//   };
  
//   // Early return AFTER all hooks are called
//   if (imageArray.length === 0) {
//     return null;
//   }

//   return (
//     <div className="bg-white w-full py-8">
//       <div className="max-w-5xl mx-auto px-4">
//         <div className="relative bg-white rounded-lg shadow-md p-6 mb-8 text-center">
//           <h3 className="text-xl font-bold mb-4">More Destinations</h3>
//           <div className="relative h-80 overflow-hidden rounded-lg">
//             {imageArray.map((img, index) => (
//               <div 
//                 key={index} 
//                 className={`absolute inset-0 transition-opacity duration-500 ${index === currentSlide ? 'opacity-100' : 'opacity-0'}`}
//               >
//                 {img && (
//                   <Image 
//                     src={img} 
//                     alt={`Featured destination ${index + 1}`} 
//                     fill
//                     style={{ objectFit: "contain" }}
//                     priority={index === currentSlide}
//                     className="cursor-pointer"
//                     onClick={() => handleDealClick(index)}
//                   />
//                 )}
//               </div>
//             ))}
//           </div>
          
//           {imageArray.length > 1 && (
//             <div className="flex justify-center mt-4 space-x-2">
//               {imageArray.map((_, index) => (
//                 <button 
//                   key={index} 
//                   onClick={() => setCurrentSlide(index)}
//                   className={`w-3 h-3 rounded-full ${index === currentSlide ? 'bg-blue-600' : 'bg-gray-300'}`}
//                   aria-label={`Go to slide ${index + 1}`}
//                 />
//               ))}
//             </div>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// };



// Inside DealDetails component:

// Update the useEffect where you're fetching deals
// useEffect(() => {
//   let isMounted = true;

//   const fetchDeals = async () => {
//     try {
//       const response = await fetch("/api/deals");
      
//       if (!response.ok) {
//         throw new Error(`Failed to fetch deals: ${response.status}`);
//       }
      
//       const data = await response.json();
      
//       if (!isMounted) return;
      
//       // Make sure we're dealing with an array
//       if (Array.isArray(data)) {
//         const validImages = data
//           .filter(item => item.images && item.images.trim() !== "" && item.id)
//           .map(item => `${item.images} ${item.id}`);
        
//         console.log("Valid carousel images:", validImages);
//         setImagePush(validImages);
//       } else {
//         console.error("Expected array but got:", typeof data);
//       }
//     } catch (error) {
//       console.error("Error fetching deals for carousel:", error);
//     }
//   };
  
//   fetchDeals();
  
//   // Cleanup function
//   return () => {
//     isMounted = false;
//   };
// }, []);
